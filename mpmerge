#!/usr/bin/env php
<?php
ini_set('register_argc_argv', 1);

$autoloads = [
    __DIR__ . '/../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/vendor/autoload.php'
];

foreach ($autoloads as $file) {
    if (file_exists($file)) {
        define('MPMERGE_COMPOSER_INSTALL', $file);
        break;
    }
}

unset($file);

if (!defined('MPMERGE_COMPOSER_INSTALL')) {
    fwrite(STDERR,
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
    die(1);
}

include MPMERGE_COMPOSER_INSTALL;

\Xshifty\MyPhpMerge\Output::setup();

if (!function_exists('cprintln')) {
    function cprintln()
    {
        $class = "\\Xshifty\\MyPhpMerge\\Output";
        $method = "writeln";
        $args = func_get_args();
        return call_user_func_array([$class, $method], $args);
    }
}

if (!function_exists('cprint')) {
    function cprint()
    {
        $class = "\\Xshifty\\MyPhpMerge\\Output";
        $method = "write";
        $args = func_get_args();
        return call_user_func_array([$class, $method], $args);
    }
}

try {
    $mergeFile = 'Mergefile.json';
    $console = new \Xshifty\MyPhpMerge\Tools\Console($mergeFile, $argv);
    $console->setup();
    $console->run();
} catch (\RuntimeException $re) {
    cprintln('<warning>WARN: ' . $re->getMessage() . '(' . $re->getFile() . ':' . $re->getLine() . ')' . '</warning>');
} catch (\Exception $e) {
    cprintln('<error>ERR: ' . $e->getMessage() . '</error>');
}
